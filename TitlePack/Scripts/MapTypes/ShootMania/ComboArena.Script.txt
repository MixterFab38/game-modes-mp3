/**
 *	Combo map type
 *
 *	1 Spawn #1
 *	1 Spawn #2
 */

#RequireContext CSmMapType
#Const Version			"2013-11-07"
#Const MapTypeVersion	1
#Const ScriptName		"ComboArena.Script.txt"

#Include "TextLib" as TL
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor
#Include "Libs/Nadeo/MapType.Script.txt" as MapType

// ---------------------------------- //
// Constants
// ---------------------------------- //
#Const C_Rules _("- You must place exactly 1 Spawn #1.\n- You must place exactly 1 Spawn #2.\n- You must place exactly 1 Checkpoint.")

// ---------------------------------- //
// Functions
// ---------------------------------- //
// ---------------------------------- //
// Initialize the anchors
Void InitAnchors() {
	foreach (Anchor in AnchorData) {
		Anchor.Tag = Anchor.DefaultTag;
		if (Anchor.DefaultTag == "Spawn") {
			if (Anchor.Order != 1 && Anchor.Order != 2) Anchor.Order = 1;
		} else {
			Anchor.Order = Anchor.DefaultOrder;
		}
	}
}

// ---------------------------------- //
// Check if the map is valid
Void UpdateValidability() {
	InitAnchors();
	Anchor::UpdateAnchorCounts();
	
	if (!Anchor::HasExactlyOneAnchor("Spawn", 1, TL::Compose(_("You must place exactly one Spawn #%1."), "1"))) return;
	if (!Anchor::HasExactlyOneAnchor("Spawn", 2, TL::Compose(_("You must place exactly one Spawn #%1."), "2"))) return;
	if (!Anchor::HasExactlyOneAnchor("Checkpoint", 0, _("You must place exactly one Checkpoint."))) return;
	
	ValidationStatus = CMapType::ValidationStatus::Validated;
}

// ---------------------------------- //
// Return the manialink for spawn edition
Text EditSpawnManialink() {
	
	declare MLText = """
<frame posn="120 55">
	<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
	<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" textprefix="$fff" text="{{{_("Edit Spawn")}}}" />
	<quad posn="0 0 -1" sizen="70 23" halign="center" style="Bgs1" substyle="BgWindow2"/>
	<frame posn="0 -4">
		<label id="Spawn1" posn="0 0" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
		<label id="Spawn2" posn="0 -5" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
	</frame>
	<label id="Cancel" text="{{{_("Cancel")}}}" posn="0 -14" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
</frame>
<frame posn="120 17">
	<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
	<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" textprefix="$fff" text="{{{_("Rules")}}}" />
	<quad posn="0 0 -1" sizen="70 55" halign="center" style="Bgs1" substyle="BgWindow2"/>
	<frame posn="-30 -4">
		<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" textcolor="fff" text="{{{C_Rules}}}" />
	</frame>
</frame>
<script><!--
declare CMlLabel[] Buttons;

Void UpdateButtons() {
	declare Text	AnchorTag	for Page;
	declare Integer	AnchorOrder	for Page;
	
	foreach (Button in Buttons) {
		declare Name for Button = "";
		if(AnchorTag^AnchorOrder == Button.ControlId)
			Button.SetText("$090"^Name);
		else 
			Button.SetText("$222"^Name);
	}
}

main() {
	Buttons = [
		(Page.GetFirstChild("Spawn1")		as CMlLabel),
		(Page.GetFirstChild("Spawn2")		as CMlLabel)
	];
	foreach (Button in Buttons) {
		declare Name for Button = "";
		switch(Button.ControlId) {
			case "Spawn1"		: Name = "Spawn #1";
			case "Spawn2"		: Name = "Spawn #2";
		}
	}
	
	declare Text	AnchorTag	for Page;
	declare Integer	AnchorOrder	for Page;
	declare Boolean	Finish		for Page;
	Finish = False;
	
	UpdateButtons();
	
	while (!Finish) {
		yield;
		
		foreach (Event in PendingEvents) {
			switch(Event.Type){
				case CMlEvent::Type::MouseClick : {
					if (Event.ControlId != "Cancel") {
						switch(Event.ControlId) {
							case "Spawn1"		: { AnchorTag = "Spawn"; AnchorOrder = 1; }
							case "Spawn2"		: { AnchorTag = "Spawn"; AnchorOrder = 2; }
						}
					}
					Finish = True;
				}
			}
		}
	}
}
--></script>
""";
  
	return MLText;
}

// ---------------------------------- //
// Manialink for non editable anchor
Text NoEditManialink() {
	return """
<frame posn="120 35">
	<quad posn="0 0 -1" sizen="70 15" halign="center" style="Bgs1" substyle="BgWindow2"/>
	<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
	<label posn="0 5.5 3" scale="0.9" halign="center" valign="bottom" style="TextTitle3" textprefix="$fff" text="{{{_("This anchor is not editable")}}}" />
	<label text="OK" posn="0 -3.5 3" halign="center" style="CardButtonMedium" ScriptEvents="true"/>
    </frame>
<frame posn="120 5">
	<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
	<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" textprefix="$fff" text="{{{_("Rules")}}}" />
	<quad posn="0 0 -1" sizen="70 55" halign="center" style="Bgs1" substyle="BgWindow2"/>
	<frame posn="-30 -4">
		<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" textcolor="fff" text="{{{C_Rules}}}" />
	</frame>
</frame>
<script><!--
main() {
	declare Boolean Finish for Page;
	Finish = False;	
	while(!Finish) {
		yield;
		
		foreach(Event in PendingEvents) {
			switch(Event.Type){
				case CMlEvent::Type::MouseClick : {
					Finish = True;
				}	
			}
		}
	}
}
--></script>
""";
}

// ---------------------------------- //
// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId) {	
	declare Text	AnchorTag	for ManialinkPage;
	declare Integer	AnchorOrder	for ManialinkPage;
	declare Boolean	Finish		for ManialinkPage;
	
	if (AnchorData[_EditedAnchorDataId].DefaultTag == "Spawn") ManialinkText = EditSpawnManialink();
	else ManialinkText = NoEditManialink();
	
	AnchorTag = AnchorData[_EditedAnchorDataId].Tag;
	AnchorOrder = AnchorData[_EditedAnchorDataId].Order;
	Finish = False;
	while (!Finish) {
		yield;
	}
	AnchorData[_EditedAnchorDataId].Tag = AnchorTag;
	AnchorData[_EditedAnchorDataId].Order = AnchorOrder;
	
	UpdateValidability();
}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	MapType::SetVersion(MapTypeVersion);
	
	InitAnchors();
	UpdateValidability();
	CustomEditAnchorData = True;
	while (True) {
		yield;
		ManialinkText = "";
		foreach (Event in PendingEvents) {
			if (Event.Type == CPluginEvent::Type::MapModified) {
				UpdateValidability();
			} else if (Event.Type == CPluginEvent::Type::EditAnchor) {
				EditAnchorData(Event.EditedAnchorDataId);
			}
		}
	}
}